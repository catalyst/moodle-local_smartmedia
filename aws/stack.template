---
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# @copyright   2019 Matt Porritt <mattp@catalyst-au.net>
# @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later

AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template will provision all the required resources and infrastructure
  to setup the smart media infrastructure.

# These are the required parameters that need to be passed to the stack
# as part of the initial stack build
Parameters:
  ResourceBucket:
    Type: String
    Default: moodlesmartmedia-resource
    Description: The bucket that contains the Lambda archive.
  LambdaTranscodeTriggerArchiveKey:
    Type: String
    Default: lambda_ai_trigger.zip
    Description: The S3 Key (filename) for the Lambda AI trigger function archive.
  LambdaAiArchiveKey:
    Type: String
    Default: lambda_transcoder_trigger.zip
    Description: The S3 Key (filename) for the Lambda transcode trigger function archive.
  LambdaRekognitionCompleteArchiveKey:
    Type: String
    Default: lambda_rekognition_complete.zip
    Description: The S3 Key (filename) for the Lambda Rekognition complete function archive.
  LambdaTranscribeCompleteArchiveKey:
    Type: String
    Default: lambda_transcribe_complete.zip
    Description: The S3 Key (filename) for the Lambda Transcribe complete function archive.
  LambdaTranscodeResourceFunctionArn:
    Type: String
    Default: arn:aws:lambda:ap-southeast-2:693620471840:function:resourcestack_lambda_transcoder_resource
    Description: Lambda function ARN that provides Elastic Transcoder custom resource.

# These are the resources and AWS services that the stack creates.
Resources:
# Roles and Policies.
# These are the IAM roles and policies used by resources and services in the stack.
# Roles and polices grant the services and services permissions to carry out their
# operations.
  LambdaTranscodeTriggerRole:
    Description: The role that the 'LambdaTranscodeTriggerFunction' assumes when it runs
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [!Ref 'AWS::StackName', 'elastic-transcode-trigger-role'] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
  LambdaTranscodeTriggerPolicy:
    # This is the policy that is applied to the LambdaTranscodeTriggerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:*
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource: arn:aws:s3:::*
        - Effect: Allow
          Action:
          - elastictranscoder:CreateJob
          - elastictranscoder:ReadJob
          - elastictranscoder:ReadPipeline
          Resource: '*'
      PolicyName: !Join [ '-', [!Ref 'AWS::StackName', 'lambda-transcode-trigger-policy'] ]
      Roles:
        - !Ref LambdaTranscodeTriggerRole
  RekognitionCompleteRole:
    Type: AWS::IAM::Role
    Description: Rekognition Complete SNS role
    Properties:
      RoleName: !Join [ '-', [!Ref 'AWS::StackName', 'rekognition-complete-sns-role'] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: rekognition.amazonaws.com
          Action: sts:AssumeRole
  RekognitionCompletePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - "*"
      PolicyName: !Join [ '-', [!Ref 'AWS::StackName', 'rekognition-complete-sns-policy'] ]
      Roles:
        - !Ref RekognitionCompleteRole
  LambdaAiRole:
    Type: AWS::IAM::Role
    Description: Lambda Ai role
    Properties:
      RoleName: !Join [ '-', [!Ref 'AWS::StackName', 'lambda-ai-role'] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
  LambdaAiPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:*
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource: arn:aws:s3:::*
        - Effect: Allow
          Action:
          - rekognition:StartCelebrityRecognition
          - rekognition:StartContentModeration
          - rekognition:StartFaceDetection
          - rekognition:StartLabelDetection
          - rekognition:StartPersonTracking
          - rekognition:GetCelebrityRecognition
          - rekognition:GetContentModeration
          - rekognition:GetFaceDetection
          - rekognition:GetLabelDetection
          - rekognition:GetPersonTracking
          Resource: '*'
        - Effect: Allow
          Action:
          - transcribe:StartTranscriptionJob
          - transcribe:GetTranscriptionJob
          Resource: '*'
        - Effect: Allow
          Action:
          - comprehend:DetectDominantLanguage
          - comprehend:DetectEntities
          - comprehend:DetectKeyPhrases
          - comprehend:DetectSentiment
          - comprehend:DetectSyntax
          Resource: '*'
        -   Effect: Allow
            Action: iam:PassRole
            Resource: '*'
      PolicyName: !Join [ '-', [!Ref 'AWS::StackName', 'lambda-ai-policy'] ]
      Roles:
        - !Ref LambdaAiRole
  ElasticTranscoderPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Action:
          - s3:ListBucket
          - s3:Put*
          - s3:Get*
          - s3:*MultipartUpload*
          Resource:
          - "*"
        - Sid: '2'
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - "*"
        - Sid: '3'
          Effect: Deny
          Action:
          - s3:*Policy*
          - sns:*Permission*
          - sns:*Delete*
          - s3:*Delete*
          - sns:*Remove*
          Resource:
          - "*"
      PolicyName: !Join [ '-', [!Ref 'AWS::StackName', 'transcoder-process-policy'] ]
      Roles:
        - !Ref ElasticTranscoderRole
  ElasticTranscoderRole:
    Type: AWS::IAM::Role
    Description: Elastic Transcoder Role
    Properties:
      RoleName: !Join [ '-', [!Ref 'AWS::StackName', 'elastic-transcoder-role'] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal:
            Service: elastictranscoder.amazonaws.com
          Action: sts:AssumeRole
  SqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal: '*'
          Action: sqs:SendMessage
          Resource: !GetAtt SqsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref SnsTopicConversion
        - Sid: '2'
          Effect: Allow
          Principal: '*'
          Action: sqs:SendMessage
          Resource: !GetAtt SqsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref SnsTopicComplete
      Queues:
        - !Ref SqsQueue
# Lambda permissions.
# Theses are specific permissions used t.o allow services and resources
# To invoke Lambda functions.
  LambdaAiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaAiFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsTopicComplete
  LambdaRekognitionCompletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaRekognitionCompleteFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsTopicRekognitionComplete
  LambdaTranscodeTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaTranscodeTriggerFunction
      Principal: s3.amazonaws.com
      SourceArn: !Join [ '', ['arn:aws:s3:::', !Ref 'AWS::StackName', '-','input'] ]
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaTranscribeCompleteFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscribeEventRule.Arn
# Lambda functions.
# These functions respond to various events and orchestrate various
# parts of the conversion process.
  LambdaTranscodeTriggerFunction:
    Type: AWS::Lambda::Function
    Description: Lambda Function to trigger Elastic Transcoder conversions.
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Ref LambdaTranscodeTriggerArchiveKey
      FunctionName: !Join [ '_', [!Ref 'AWS::StackName', 'transcoder_trigger'] ]
      Handler: lambda_transcoder_trigger.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaTranscodeTriggerRole.Arn
      Runtime: python3.6
      Timeout: 600
  LambdaAiFunction:
    Type: AWS::Lambda::Function
    Description: Lambda Function to trigger Ai processing.
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Ref LambdaAiArchiveKey
      Environment:
        Variables:
          OutputBucket: !Join [ '-', [!Ref 'AWS::StackName', 'output'] ]
          SnsTopicRekognitionCompleteArn: !Ref SnsTopicRekognitionComplete
          RekognitionCompleteRoleArn: !GetAtt RekognitionCompleteRole.Arn
      FunctionName: !Join [ '_', [!Ref 'AWS::StackName', 'transcoder_ai'] ]
      Handler: lambda_ai_trigger.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaAiRole.Arn
      Runtime: python3.6
      Timeout: 600
  LambdaRekognitionCompleteFunction:
    Type: AWS::Lambda::Function
    Description: Lambda Function to handle Rekognition completion events.
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Ref LambdaRekognitionCompleteArchiveKey
      FunctionName: !Join [ '_', [!Ref 'AWS::StackName', 'rekognition_complete'] ]
      Handler: lambda_rekognition_complete.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaAiRole.Arn
      Runtime: python3.6
      Timeout: 600
  LambdaTranscribeCompleteFunction:
    Type: AWS::Lambda::Function
    Description: Lambda Function to handle Transcribe completion events.
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Ref LambdaTranscribeCompleteArchiveKey
      FunctionName: !Join [ '_', [!Ref 'AWS::StackName', 'transcribe_complete'] ]
      Handler: lambda_transcribe_complete.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaAiRole.Arn
      Runtime: python3.6
      Timeout: 600
# SQS Queues.
# These provide messaging notifications to various sevices.
  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSqsQueue'] ]
# SNS Topics.
# Resources and services publish status notifications to topics.
# Other resources ans sservices subscribe to the topics and tak action
# When messages are published to them.
  SnsTopicConversion:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicConversion'] ]
      TopicName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicConversion'] ]
      Subscription :
        -
          Endpoint: !GetAtt SqsQueue.Arn
          Protocol: 'sqs'
  SnsTopicComplete:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicComplete'] ]
      TopicName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicComplete'] ]
      Subscription :
        -
          Endpoint: !GetAtt SqsQueue.Arn
          Protocol: 'sqs'
        -
          Endpoint: !GetAtt LambdaAiFunction.Arn
          Protocol: 'lambda'
  SnsTopicRekognitionComplete:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicRekognitionComplete'] ]
      TopicName: !Join [ '-', [!Ref 'AWS::StackName', 'SmartmediaSnsTopicRekognitionComplete'] ]
      Subscription :
        -
          Endpoint: !GetAtt LambdaRekognitionCompleteFunction.Arn
          Protocol: 'lambda'
# Custom Resources.
# Custom resources setup AWS services that are not natively supported by Cloudformation.
  ElasticTranscoderPipeline:
    DependsOn:
      - InputS3Bucket
      - OutputS3Bucket
    Type: Custom::ElasticTranscoderPipeline
    Properties:
      ServiceToken: !Ref LambdaTranscodeResourceFunctionArn
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'Pipeline'] ]
      Role: !GetAtt ElasticTranscoderRole.Arn
      InputBucket: !Ref InputS3Bucket
      OutputBucket: !Ref OutputS3Bucket
      Notifications:
        Completed: !Ref SnsTopicComplete
        Error: !Ref SnsTopicConversion
        Progressing: !Ref SnsTopicConversion
        Warning: !Ref SnsTopicConversion
# Cloudwatch events.
# Trigger actions based on custom events.
  TranscribeEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Name: 'TranscribeEventRule'
      Description: 'Cloudwatch event rule for transcribe completion.'
      EventPattern: 
        source: 
          - "aws.transcribe"
        detail-type: 
          - "Transcribe Job State Change"
        detail: 
          TranscriptionJobStatus: 
            - COMPLETED
      State: 'ENABLED'
      Targets: 
        - 
          Arn: !GetAtt LambdaTranscribeCompleteFunction.Arn
          Id: 'LambdaTranscribeCompleteFunction'

# S3 Buckets.
# These are the S3 buckets created by the stack.
# The are used to store assets processed byt the resources and services.
  InputS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [!Ref 'AWS::StackName', 'input'] ]
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LambdaTranscodeTriggerFunction.Arn
  OutputS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [!Ref 'AWS::StackName', 'output'] ]
      AccessControl: Private
# Users
# These are the IAM users created by the stack.
# They are used by external systems interacting with the stack.
  SmartMediaS3User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join [ '', [!Ref 'AWS::StackName', 'SmartMediaS3User'] ]
      Policies:
       - PolicyName: !Join [ '', [!Ref 'AWS::StackName', 'SmartMediaS3UserPolicy'] ]
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:ListBucket
              Resource:
              - !Join [ '', [!GetAtt InputS3Bucket.Arn, '*'] ]
              - !Join [ '', [!GetAtt OutputS3Bucket.Arn, '*'] ]
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              Resource:
              - !Join [ '', [!GetAtt InputS3Bucket.Arn, '/*'] ]
              - !Join [ '', [!GetAtt OutputS3Bucket.Arn, '/*'] ]
  SmartMediaS3UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref SmartMediaS3User
# Stack Outputs.
# These are the outputs generated by the stack.
# They are used by processes external to the stack.
Outputs:
  SmartMediaS3UserAccessKey:
    Description: Smart media S3 user access key
    Value: !Ref SmartMediaS3UserAccessKey
  SmartMediaS3UserSecretKey:
    Description:  Smart media S3 user secret key
    Value: !GetAtt SmartMediaS3UserAccessKey.SecretAccessKey
  InputBucket:
    Description: S3 Input Bucket
    Value: !Ref InputS3Bucket
  OutputBucket:
    Description: S3 Output Bucket
    Value: !Ref OutputS3Bucket
  TranscodeLambdaArn:
   Description: The ARN of the Lambda transcode funciton
   Value: !GetAtt LambdaTranscodeTriggerFunction.Arn
  TranscodePipelineId:
    Description: Elastic Transcoder Pipeline ID
    Value: !GetAtt ElasticTranscoderPipeline.PipelineId
  RekognitionCompleteLambdaArn:
   Description: The ARN of the Lambda transcode funciton
   Value: !GetAtt LambdaRekognitionCompleteFunction.Arn
  SnsTopicRekognitionCompleteArn:
    Description: Rekognition complete SNS topic ARN
    Value: !Ref SnsTopicRekognitionComplete
